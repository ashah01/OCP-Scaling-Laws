Problem: positions and everything work fine now, just the distance matrix computed by OCP is not useful for graphormer.
Computing the node wise distances is not difficult, but figuring out how to incorporate the PBC offset information is
ambiguous. If we can do that, the correct spatial information will be learned through the attention bias layers.


Push non PBC data processing changes

    There appears to be an issue with the gaussian blur filter. The
    embeddings are receiving values larger than their maximum indices.
    Graphormer natively sets the atom_types to 64 and the edge_types to
    its square, but S2EF has 84 atom types, and the square doesn't seem
    to be large enough.

    Solution: the atom embedder provided in the data_loading.py is required
    to make gbf work. Implement and test. It works ðŸŽ‰!


Understand the cell offsets and how they're computed

    They're added to the distance vectors, which are obtained by subtracting the atomic positions of the
    edge_index rows with the atomic positions of the edge_index columns. This produces a tensor who's
    elements are simply the difference of the source and target nodes' atomic positions. This tensor has
    its norm computed shortly after to convert the position differences into distances.

    Unfortunately, this is not at all what we're after. Graphormer demands the distance between every
    node pair, not the edge distances. How would cell offset information be incorporated here? It's
    probably helpful to analyze why the cell offset information is used in the first place before
    determining how to incorporate it into the [n x n] distance tensor.

    The indices of the edge_index tensor that are offset is:
    tensor([[ 1],
        [ 4],
        [ 6],
        [ 8],
        [ 9],
        [16],
        [36],
        [38],
        [42],
        [53],
        [54],
        [63]])
    What's special about these?


Incorporate the cell offsets into the [bsz, n, n] dist tensor